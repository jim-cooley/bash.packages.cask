#!/bin/bash
# abbv - abbreviations
#
# maintains a table of abbreviations, arbitration between and list/help facility
#
# read base definitions
: {$CLIROOT?"ERROR: \$CLIROOT not set"}
source "$CLIINC/stderr"

# load global data:
declare -xa abbreviations=()
declare abbv_cache=~/.abbreviations
if [ -s $abbv_cache ]; then
#   abbreviations=$(<$abbv_cache)
    IFS_SAVE="$IFS"; IFS=''
    n=0
    while read -r line || [[ -n "$line" ]]; do
        echo "$n: $line"
        abbreviations[$n]="$line"
        ((n+=1))
    done < $abbv_cache
    IFS="$IFS_SAVE"

    printf "${#abbreviations[@]} abbreviations loaded.\n\n"
fi

#
#
usage="
    abbv [options] {abbreviation}={value} ...

      -h                = print this message
      -l | --list       = list all abbreviations
      -s | --set {list} = set abbreviation
      -u | --unset {list}=unset abbreviations
      -v | --verbose    = be verbose

"

# functions:
clear_abbreviations() {
    abbreviations=()
    modified=1
}

# contains:
# if [[ $string == *"my substring"* ]]; then echo "its there!!"; fi
#
# also:
#case "$string" in 
#  *foo*)
#    # Do stuff
#    ;;
#esac

containsKey() {
    echo "checking: $1"
    for e in ${abbreviations[@]}; do
        echo "$e"
        [[ $(get_key "$e") == "$1" ]] && printf "1"; return 1
    done
    printf "0"
}

get_key() {
    delim=${2:-\=}
    key=${1%%$delim*}
    echo ${key//\ /-}   # replaces spaces with '-'
}

get_value() {
    delim=${2:-\=}
    value=${1##*$delim}
    echo $value
}

list_abbreviations() {
    if [ ${#abbreviations[@]} -eq 0 ]; then
        printf "abbreviations: empty\n"
    else
        printf "${#abbreviations[@]} abbreviations:\n"
#       printf "${#abbreviations[@]} abbreviations:\n======\n${abbreviations[@]}\n======\n\n"
        for d in "${abbreviations[@]}"; do
            printf "%-16s= '%s\'\n" "'$(get_key "$d")'" $(get_value "$d")
        done
    fi
}

set_abbreviation() {
    basekey=$(get_key "$1")
    key=$basekey
    def=$(get_value "$1")
    len=${#abbreviations[@]}
    local -i n=0
    local -i keyExists=0
    printf "\'%s\'\n\n" $(containsKey "$abbreviations" "$key")
    (( keyExists=$(containsKey "$key") ))
    while [ $keyExists -gt 0 ]; do
        echo "$key exists, trying $basekey$n"
        key=$basekey$n; echo "$key"
        (( keyExists=$(containsKey "$key") + 0)); ((n+=1))
        echo "$n: ($keyExists) $key"
    done
    ((len+=1))
    abbreviations[$len]="$key=$def"
    modified=1
    printf "1 abbreviation added: (%s as %s)\n" "$key" "$def"
}

store_abbreviations() {
    printf "%s\n" "${abbreviations[@]}" > ~/.abbreviations
    [ $verbose -gt 0 ] && printf "${#abbreviations[@]} abbreviations saved."
}

#unset_abbreviation() {
#}

trim() {
    echo "$(sed -e 's/[[:space:]]*$//' <<<${1})"
}

#
# init:
dryrun=0
verbose=0
modified=0

# check parameter count:
if [[ $# -eq 0 ]] ; then
	printusage
	exit 0
fi

# 
# parse parameters
#
while [[ $# -gt 0 ]] ; do
	case "$1" in
		-h | --help)
			printusage; exit;;
        -c | --clear)
            clear_abbreviations;;
        -l | --list)
            list_abbreviations;;
        -s | --set)
            set_abbreviation "$2"; shift;;
        -u | --unset)
            unset_abbreviation "$2"; shift;;
        -x | --dry | -dryrun | -noexec | -norun | -nox)
			dryrun=1;;
        -v | --verbose)
            verbose=1;;
        -w | --readwrite | -write)
            iomode="--readwrite";;
		*)
			yamlfile="$1";;
	esac
	shift
done

if [ $modified -gt 0 ]; then store_abbreviations; fi
